{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/stephangilli/projects/besuchernachweis/frontend/pages/[locale]/visitor/register.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Alert from '@material-ui/lab/Alert';\nimport useRestClient from '../../../hooks/useRestClient';\nimport Register from '../../../components/RegisterVisit';\n\nvar Visitors = function Visitors() {\n  var _useRestClient = useRestClient(),\n      client = _useRestClient.client,\n      setIsLoading = _useRestClient.setIsLoading,\n      setHasError = _useRestClient.setHasError;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      createStatus = _React$useState2[0],\n      setCreateStatus = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      gebaeude = _React$useState4[0],\n      setGebaeude = _React$useState4[1];\n\n  React.useEffect(function () {\n    function getGebaude() {\n      var res;\n      return _regeneratorRuntime.async(function getGebaude$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!client) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(client.getGebauede());\n\n            case 3:\n              res = _context.sent;\n              if (res) setGebaeude(res);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getGebaude();\n  }, []);\n  return __jsx(React.Fragment, null, createStauts === 'success' && __jsx(Alert, {\n    severity: \"success\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Besuch erfolgreich angelegt.\"), __jsx(Register, {\n    buildings: gebaeude,\n    createNewVisitor: function _callee(props) {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!client) {\n                _context2.next = 17;\n                break;\n              }\n\n              setIsLoading(true);\n              _context2.prev = 2;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(client.postBesucher({\n                person: {\n                  name: props.name,\n                  vorname: props.firstName,\n                  email: props.email,\n                  telefon: props.phone\n                },\n                gesundheitsstatus: 'gesund'\n              }));\n\n            case 5:\n              res = _context2.sent;\n\n              if (!(res && res.id)) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(client.postBesuch({\n                besucher: [res.id],\n                raeume: props.rooms\n              }));\n\n            case 9:\n              setIsLoading(false);\n              setCreateStatus('success');\n              _context2.next = 17;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](2);\n              setCreateStatus('error');\n              setHasError(true);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[2, 13]], Promise);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Visitors;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/pages/[locale]/visitor/register.tsx"],"names":["React","Alert","useRestClient","Register","Visitors","client","setIsLoading","setHasError","useState","createStatus","setCreateStatus","gebaeude","setGebaeude","useEffect","getGebaude","getGebauede","res","createStauts","props","postBesucher","person","name","vorname","firstName","email","telefon","phone","gesundheitsstatus","id","postBesuch","besucher","raeume","rooms"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,QAAP,MAAqB,mCAArB;;AAEA,IAAMC,QAAiC,GAAG,SAApCA,QAAoC,GAAM;AAAA,uBACAF,aAAa,EADb;AAAA,MACtCG,MADsC,kBACtCA,MADsC;AAAA,MAC9BC,YAD8B,kBAC9BA,YAD8B;AAAA,MAChBC,WADgB,kBAChBA,WADgB;;AAAA,wBAENP,KAAK,CAACQ,QAAN,CAAoB,EAApB,CAFM;AAAA;AAAA,MAEvCC,YAFuC;AAAA,MAEzBC,eAFyB;;AAAA,yBAGdV,KAAK,CAACQ,QAAN,CAAe,IAAf,CAHc;AAAA;AAAA,MAGvCG,QAHuC;AAAA,MAG7BC,WAH6B;;AAI9CZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpB,aAAeC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACMT,MADN;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAEsBA,MAAM,CAACU,WAAP,EAFtB;;AAAA;AAEUC,cAAAA,GAFV;AAGI,kBAAIA,GAAJ,EAASJ,WAAW,CAACI,GAAD,CAAX;;AAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMAF,IAAAA,UAAU;AACX,GARD,EAQG,EARH;AAUA,SACE,4BACGG,YAAY,KAAK,SAAjB,IACC,MAAC,KAAD;AAAO,IAAA,QAAQ,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFJ,EAIE,MAAC,QAAD;AACE,IAAA,SAAS,EAAEN,QADb;AAEE,IAAA,gBAAgB,EAAE,iBAAMO,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZb,MADY;AAAA;AAAA;AAAA;;AAEdC,cAAAA,YAAY,CAAC,IAAD,CAAZ;AAFc;AAAA;AAAA,+CAIMD,MAAM,CAACc,YAAP,CAAoB;AACpCC,gBAAAA,MAAM,EAAE;AACNC,kBAAAA,IAAI,EAAEH,KAAK,CAACG,IADN;AAENC,kBAAAA,OAAO,EAAEJ,KAAK,CAACK,SAFT;AAGNC,kBAAAA,KAAK,EAAEN,KAAK,CAACM,KAHP;AAINC,kBAAAA,OAAO,EAAEP,KAAK,CAACQ;AAJT,iBAD4B;AAOpCC,gBAAAA,iBAAiB,EAAE;AAPiB,eAApB,CAJN;;AAAA;AAINX,cAAAA,GAJM;;AAAA,oBAaRA,GAAG,IAAIA,GAAG,CAACY,EAbH;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAcJvB,MAAM,CAACwB,UAAP,CAAkB;AACtBC,gBAAAA,QAAQ,EAAE,CAACd,GAAG,CAACY,EAAL,CADY;AAEtBG,gBAAAA,MAAM,EAAEb,KAAK,CAACc;AAFQ,eAAlB,CAdI;;AAAA;AAmBZ1B,cAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,cAAAA,eAAe,CAAC,SAAD,CAAf;AApBY;AAAA;;AAAA;AAAA;AAAA;AAsBZA,cAAAA,eAAe,CAAC,OAAD,CAAf;AACAH,cAAAA,WAAW,CAAC,IAAD,CAAX;;AAvBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAqCD,CAnDD;;AAqDA,eAAeH,QAAf","sourcesContent":["import * as React from 'react';\nimport Alert from '@material-ui/lab/Alert';\nimport useRestClient from '../../../hooks/useRestClient';\nimport Register from '../../../components/RegisterVisit';\n\nconst Visitors: React.FunctionComponent = () => {\n  const { client, setIsLoading, setHasError } = useRestClient();\n  const [createStatus, setCreateStatus] = React.useState<any>('');\n  const [gebaeude, setGebaeude] = React.useState(null);\n  React.useEffect(() => {\n    async function getGebaude() {\n      if (client) {\n        const res = await client.getGebauede();\n        if (res) setGebaeude(res);\n      }\n    }\n    getGebaude();\n  }, []);\n\n  return (\n    <>\n      {createStauts === 'success' && (\n        <Alert severity=\"success\">Besuch erfolgreich angelegt.</Alert>\n      )}\n      <Register\n        buildings={gebaeude}\n        createNewVisitor={async props => {\n          if (client) {\n            setIsLoading(true);\n            try {\n              const res = await client.postBesucher({\n                person: {\n                  name: props.name,\n                  vorname: props.firstName,\n                  email: props.email,\n                  telefon: props.phone,\n                },\n                gesundheitsstatus: 'gesund',\n              });\n              if (res && res.id) {\n                await client.postBesuch({\n                  besucher: [res.id],\n                  raeume: props.rooms,\n                });\n              }\n              setIsLoading(false);\n              setCreateStatus('success');\n            } catch (error) {\n              setCreateStatus('error');\n              setHasError(true);\n            }\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport default Visitors;\n"]},"metadata":{},"sourceType":"module"}