{"ast":null,"code":"import * as React from 'react';\nimport LocaleContext from '../context/LocaleContext';\nimport translations from '../translations';\nimport { defaultLocale } from '../utils/locales';\n\nvar useTranslation = function useTranslation() {\n  var _React$useContext = React.useContext(LocaleContext),\n      locale = _React$useContext.locale;\n\n  function t(key) {\n    if (!translations[locale][key]) {\n      console.warn(\"Translation '\".concat(key, \"' for locale '\").concat(locale, \"' not found.\"));\n    }\n\n    return translations[locale][key] || translations[defaultLocale][key] || '';\n  }\n\n  return {\n    t: t,\n    locale: locale\n  };\n};\n\nexport default useTranslation;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/hooks/useTranslations.tsx"],"names":["React","LocaleContext","translations","defaultLocale","useTranslation","useContext","locale","t","key","console","warn"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,0BACRJ,KAAK,CAACK,UAAN,CAAiBJ,aAAjB,CADQ;AAAA,MACnBK,MADmB,qBACnBA,MADmB;;AAE3B,WAASC,CAAT,CAAWC,GAAX,EAAmB;AACjB,QAAI,CAACN,YAAY,CAACI,MAAD,CAAZ,CAAqBE,GAArB,CAAL,EAAgC;AAC9BC,MAAAA,OAAO,CAACC,IAAR,wBAA6BF,GAA7B,2BAAiDF,MAAjD;AACD;;AACD,WAAOJ,YAAY,CAACI,MAAD,CAAZ,CAAqBE,GAArB,KAA6BN,YAAY,CAACC,aAAD,CAAZ,CAA4BK,GAA5B,CAA7B,IAAiE,EAAxE;AACD;;AACD,SAAO;AAAED,IAAAA,CAAC,EAADA,CAAF;AAAKD,IAAAA,MAAM,EAANA;AAAL,GAAP;AACD,CATD;;AAWA,eAAeF,cAAf","sourcesContent":["import * as React from 'react';\nimport LocaleContext from '../context/LocaleContext';\nimport translations from '../translations';\nimport { defaultLocale } from '../utils/locales';\nimport { T } from '../types/locales';\n\nconst useTranslation = () => {\n  const { locale } = React.useContext(LocaleContext);\n  function t(key: T) {\n    if (!translations[locale][key]) {\n      console.warn(`Translation '${key}' for locale '${locale}' not found.`);\n    }\n    return translations[locale][key] || translations[defaultLocale][key] || '';\n  }\n  return { t, locale };\n};\n\nexport default useTranslation;\n"]},"metadata":{},"sourceType":"module"}