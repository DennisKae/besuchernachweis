{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/stephangilli/projects/besuchernachweis/frontend/context/LocaleContext.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useRouter } from 'next/router';\nimport { isLocale, defaultLocale } from '../utils/locales';\nvar LocaleContext = React.createContext({\n  locale: defaultLocale,\n  setLocale: function setLocale() {\n    return null;\n  }\n});\nexport var LocaleProvider = function LocaleProvider(_ref) {\n  var initialLocale = _ref.initialLocale,\n      children = _ref.children;\n\n  var _React$useState = React.useState(initialLocale),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      locale = _React$useState2[0],\n      setLocale = _React$useState2[1];\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  React.useEffect(function () {\n    if (typeof query.locale === 'string' && isLocale(query.locale) && locale !== query.locale) {\n      setLocale(query.locale);\n    }\n  }, [query.locale, locale]);\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      locale: locale,\n      setLocale: setLocale\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport default LocaleContext;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/context/LocaleContext.tsx"],"names":["React","useRouter","isLocale","defaultLocale","LocaleContext","createContext","locale","setLocale","LocaleProvider","initialLocale","children","useState","query","useEffect"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,kBAAxC;AAQA,IAAMC,aAAa,GAAGJ,KAAK,CAACK,aAAN,CAAkC;AACtDC,EAAAA,MAAM,EAAEH,aAD8C;AAEtDI,EAAAA,SAAS,EAAE;AAAA,WAAM,IAAN;AAAA;AAF2C,CAAlC,CAAtB;AAKA,OAAO,IAAMC,cAAmD,GAAG,SAAtDA,cAAsD,OAG7D;AAAA,MAFJC,aAEI,QAFJA,aAEI;AAAA,MADJC,QACI,QADJA,QACI;;AAAA,wBACwBV,KAAK,CAACW,QAAN,CAAeF,aAAf,CADxB;AAAA;AAAA,MACGH,MADH;AAAA,MACWC,SADX;;AAAA,mBAEcN,SAAS,EAFvB;AAAA,MAEIW,KAFJ,cAEIA,KAFJ;;AAIJZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpB,QACE,OAAOD,KAAK,CAACN,MAAb,KAAwB,QAAxB,IACAJ,QAAQ,CAACU,KAAK,CAACN,MAAP,CADR,IAEAA,MAAM,KAAKM,KAAK,CAACN,MAHnB,EAIE;AACAC,MAAAA,SAAS,CAACK,KAAK,CAACN,MAAP,CAAT;AACD;AACF,GARD,EAQG,CAACM,KAAK,CAACN,MAAP,EAAeA,MAAf,CARH;AAUA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAM,EAANA,MAAF;AAAUC,MAAAA,SAAS,EAATA;AAAV,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,QADH,CADF;AAKD,CAtBM;AAwBP,eAAeN,aAAf","sourcesContent":["import * as React from 'react';\nimport { useRouter } from 'next/router';\nimport { isLocale, defaultLocale } from '../utils/locales';\nimport { Locale } from '../types';\n\ntype ContextProps = {\n  readonly locale: Locale;\n  readonly setLocale: (locale: Locale) => void;\n};\n\nconst LocaleContext = React.createContext<ContextProps>({\n  locale: defaultLocale,\n  setLocale: () => null,\n});\n\nexport const LocaleProvider: React.FC<{ initialLocale: Locale }> = ({\n  initialLocale,\n  children,\n}) => {\n  const [locale, setLocale] = React.useState(initialLocale);\n  const { query } = useRouter();\n\n  React.useEffect(() => {\n    if (\n      typeof query.locale === 'string' &&\n      isLocale(query.locale) &&\n      locale !== query.locale\n    ) {\n      setLocale(query.locale);\n    }\n  }, [query.locale, locale]);\n\n  return (\n    <LocaleContext.Provider value={{ locale, setLocale }}>\n      {children}\n    </LocaleContext.Provider>\n  );\n};\n\nexport default LocaleContext;\n"]},"metadata":{},"sourceType":"module"}