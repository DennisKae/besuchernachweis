{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Toolbar, Typography, Paper, Button } from '@material-ui/core';\nimport useStyles, { useToolbarStyles } from './style';\n\nvar EnhancedTableHead = function EnhancedTableHead(_ref) {\n  var cells = _ref.cells;\n  return __jsx(TableHead, null, __jsx(TableRow, null, cells.map(function (cell) {\n    return __jsx(TableCell, {\n      key: cell,\n      align: \"left\",\n      padding: \"default\"\n    }, cell);\n  })));\n};\n\nvar EnhancedTableToolbar = function EnhancedTableToolbar() {\n  var classes = useToolbarStyles();\n  return __jsx(Toolbar, {\n    className: classes.root\n  }, __jsx(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    id: \"tableTitle\"\n  }, \"Besuche\"));\n};\n\nvar EnhancedTableCell = function EnhancedTableCell(_ref2) {\n  var children = _ref2.children;\n  var classes = useStyles();\n  return __jsx(TableCell, {\n    className: classes.cell,\n    component: \"th\",\n    scope: \"row\",\n    padding: \"none\"\n  }, children);\n};\n\nfunction formatValue(val) {\n  if (Array.isArray(val)) return val.join(', ');\n  return val;\n}\n\nvar EnhancedTable = function EnhancedTable(_ref3) {\n  var rows = _ref3.rows,\n      rowsPerPageOptions = _ref3.rowsPerPageOptions,\n      count = _ref3.count,\n      rowsPerPage = _ref3.rowsPerPage,\n      page = _ref3.page,\n      onChangePage = _ref3.onChangePage,\n      onChangeRowsPerPage = _ref3.onChangeRowsPerPage,\n      displayOnly = _ref3.displayOnly,\n      onClickRow = _ref3.onClickRow,\n      buttonLabel = _ref3.buttonLabel;\n  if (rows.length === 0) return null;\n  var classes = useStyles();\n  var cells = Object.keys(rows[0]);\n  if (!displayOnly) cells.push('');\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(EnhancedTableToolbar, null), __jsx(TableContainer, null, __jsx(Table, {\n    className: classes.table\n  }, __jsx(EnhancedTableHead, {\n    cells: cells\n  }), __jsx(TableBody, null, rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (row, index) {\n    var keys = Object.keys(row);\n    return __jsx(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: index\n    }, keys.map(function (k, index) {\n      // @ts-ignore\n      var value = formatValue(row[k]);\n      return __jsx(EnhancedTableCell, {\n        key: index\n      }, value);\n    }), !displayOnly && __jsx(EnhancedTableCell, {\n      key: index\n    }, __jsx(Button, {\n      variant: \"outlined\",\n      color: \"secondary\",\n      onClick: function onClick() {\n        if (row['ID']) onClickRow(row['ID']);\n      }\n    }, buttonLabel)));\n  })))), __jsx(TablePagination, {\n    rowsPerPageOptions: rowsPerPageOptions,\n    labelRowsPerPage: \"Datens\\xE4tze pro Seite\",\n    count: count,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    component: \"div\",\n    onChangePage: onChangePage,\n    onChangeRowsPerPage: onChangeRowsPerPage,\n    labelDisplayedRows: function labelDisplayedRows(_ref4) {\n      var from = _ref4.from,\n          to = _ref4.to,\n          count = _ref4.count;\n      return \"\".concat(from, \"-\").concat(to, \" von \").concat(count);\n    }\n  })));\n};\n\nexport default EnhancedTable;","map":null,"metadata":{},"sourceType":"module"}