{"ast":null,"code":"var _jsxFileName = \"/Users/stephangilli/projects/besuchernachweis/frontend/hooks/useTranslations.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport LocaleContext from '../context/LocaleContext';\nimport translations from '../translations';\nimport { defaultLocale } from '../utils/locales';\n\nconst useTranslation = () => {\n  const {\n    locale\n  } = React.useContext(LocaleContext);\n\n  function t(key) {\n    if (!translations[locale][key]) {\n      console.warn(`Translation '${key}' for locale '${locale}' not found.`);\n    }\n\n    return __jsx(\"p\", {\n      \"translation-id\": key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, translations[locale][key] || translations[defaultLocale][key] || '');\n  }\n\n  return {\n    t,\n    locale\n  };\n};\n\nexport default useTranslation;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/hooks/useTranslations.tsx"],"names":["React","LocaleContext","translations","defaultLocale","useTranslation","locale","useContext","t","key","console","warn"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAaL,KAAK,CAACM,UAAN,CAAiBL,aAAjB,CAAnB;;AACA,WAASM,CAAT,CAAWC,GAAX,EAAqB;AACnB,QAAI,CAACN,YAAY,CAACG,MAAD,CAAZ,CAAqBG,GAArB,CAAL,EAAgC;AAC9BC,MAAAA,OAAO,CAACC,IAAR,CAAc,gBAAeF,GAAI,iBAAgBH,MAAO,cAAxD;AACD;;AACD,WACE;AAAG,wBAAgBG,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,YAAY,CAACG,MAAD,CAAZ,CAAqBG,GAArB,KAA6BN,YAAY,CAACC,aAAD,CAAZ,CAA4BK,GAA5B,CAA7B,IAAiE,EADpE,CADF;AAKD;;AACD,SAAO;AAAED,IAAAA,CAAF;AAAKF,IAAAA;AAAL,GAAP;AACD,CAbD;;AAeA,eAAeD,cAAf","sourcesContent":["import * as React from 'react';\nimport LocaleContext from '../context/LocaleContext';\nimport translations from '../translations';\nimport { defaultLocale } from '../utils/locales';\n\nconst useTranslation = () => {\n  const { locale } = React.useContext(LocaleContext);\n  function t(key: any) {\n    if (!translations[locale][key]) {\n      console.warn(`Translation '${key}' for locale '${locale}' not found.`);\n    }\n    return (\n      <p translation-id={key}>\n        {translations[locale][key] || translations[defaultLocale][key] || ''}\n      </p>\n    );\n  }\n  return { t, locale };\n};\n\nexport default useTranslation;\n"]},"metadata":{},"sourceType":"module"}