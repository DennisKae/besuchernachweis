{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/stephangilli/projects/besuchernachweis/frontend/components/Table/index.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Toolbar, Typography, Paper, Button } from '@material-ui/core';\nimport useStyles, { useToolbarStyles } from './style';\nvar cells = [{\n  id: 'ID',\n  key: 'id'\n}, {\n  id: 'Beginn',\n  key: 'startDate'\n}, {\n  id: 'Ende',\n  key: 'endDate'\n}, {\n  id: 'Name',\n  key: 'name'\n}, {\n  id: 'Vorname',\n  key: 'firstName'\n}, {\n  id: 'E-Mail',\n  key: 'email'\n}, {\n  id: 'RÃ¤ume',\n  key: 'rooms'\n}, {\n  id: '',\n  key: 'action'\n}];\nvar cellKeys = cells.map(function (cell) {\n  return cell.key;\n});\n\nvar EnhancedTableHead = function EnhancedTableHead() {\n  return __jsx(TableHead, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, cells.map(function (cell) {\n    return __jsx(TableCell, {\n      key: cell.id,\n      align: \"left\",\n      padding: \"default\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, cell.id);\n  })));\n};\n\nvar EnhancedTableToolbar = function EnhancedTableToolbar() {\n  var classes = useToolbarStyles();\n  return __jsx(Toolbar, {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, __jsx(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    id: \"tableTitle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Besuche\"));\n};\n\nvar EnhancedTableCell = function EnhancedTableCell(_ref) {\n  var children = _ref.children;\n  return __jsx(TableCell, {\n    className: classes.cell,\n    key: index,\n    id: labelId,\n    component: \"th\",\n    scope: \"row\",\n    padding: \"none\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nvar EnhancedTable = function EnhancedTable(_ref2) {\n  var rows = _ref2.rows;\n  var classes = useStyles();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selected = _React$useState2[0],\n      setSelected = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      page = _React$useState4[0],\n      setPage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(25),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      rowsPerPage = _React$useState6[0],\n      setRowsPerPage = _React$useState6[1];\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, __jsx(EnhancedTableToolbar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), __jsx(TableContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, __jsx(EnhancedTableHead, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), __jsx(TableBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, rows.map(function (row, index) {\n    var isItemSelected = selected.indexOf(row.id) !== -1;\n    var labelId = \"enhanced-table-checkbox-\".concat(index);\n    return __jsx(TableRow, {\n      hover: true,\n      onClick: function onClick() {\n        var selectedIndex = selected.indexOf(row.id);\n        var newSelected = [];\n\n        if (selectedIndex === -1) {\n          newSelected = newSelected.concat(selected, row.id);\n        } else if (selectedIndex === 0) {\n          newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n          newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n          newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n      },\n      role: \"checkbox\",\n      \"aria-checked\": isItemSelected,\n      tabIndex: -1,\n      key: row.id,\n      selected: isItemSelected,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }, cellKeys.map(function (k, index) {\n      if (k === 'rooms') return __jsx(TableCell, {\n        className: classes.cell,\n        key: index,\n        id: labelId,\n        component: \"th\",\n        scope: \"row\",\n        padding: \"none\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 27\n        }\n      }, // @ts-ignore\n      row[k].concat(', '));else if (k === 'action') return __jsx(TableCell, {\n        className: classes.cell,\n        key: index,\n        id: labelId,\n        component: \"th\",\n        scope: \"row\",\n        padding: \"none\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 27\n        }\n      }, __jsx(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }\n      }, \"Abmelden\"));else return __jsx(TableCell, {\n        className: classes.cell,\n        key: index,\n        id: labelId,\n        component: \"th\",\n        scope: \"row\",\n        padding: \"none\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 27\n        }\n      }, // @ts-ignore\n      row[k]);\n    }));\n  })))), __jsx(TablePagination, {\n    rowsPerPageOptions: [25, 50, 100],\n    component: \"div\",\n    count: rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: function onChangePage(_, newPage) {\n      setPage(newPage);\n    },\n    onChangeRowsPerPage: function onChangeRowsPerPage(event) {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default EnhancedTable;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/components/Table/index.tsx"],"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Toolbar","Typography","Paper","Button","useStyles","useToolbarStyles","cells","id","key","cellKeys","map","cell","EnhancedTableHead","EnhancedTableToolbar","classes","root","title","EnhancedTableCell","children","index","labelId","EnhancedTable","rows","useState","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","paper","table","row","isItemSelected","indexOf","selectedIndex","newSelected","concat","slice","length","k","_","newPage","event","parseInt","target","value"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,KADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,cAJF,EAKEC,SALF,EAMEC,eANF,EAOEC,QAPF,EAQEC,OARF,EASEC,UATF,EAUEC,KAVF,EAWEC,MAXF,QAYO,mBAZP;AAcA,OAAOC,SAAP,IAAoBC,gBAApB,QAA4C,SAA5C;AAEA,IAAMC,KAEJ,GAAG,CACH;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,GAAG,EAAE;AAFP,CADG,EAKH;AACED,EAAAA,EAAE,EAAE,QADN;AAEEC,EAAAA,GAAG,EAAE;AAFP,CALG,EASH;AACED,EAAAA,EAAE,EAAE,MADN;AAEEC,EAAAA,GAAG,EAAE;AAFP,CATG,EAaH;AACED,EAAAA,EAAE,EAAE,MADN;AAEEC,EAAAA,GAAG,EAAE;AAFP,CAbG,EAiBH;AACED,EAAAA,EAAE,EAAE,SADN;AAEEC,EAAAA,GAAG,EAAE;AAFP,CAjBG,EAqBH;AACED,EAAAA,EAAE,EAAE,QADN;AAEEC,EAAAA,GAAG,EAAE;AAFP,CArBG,EAyBH;AACED,EAAAA,EAAE,EAAE,OADN;AAEEC,EAAAA,GAAG,EAAE;AAFP,CAzBG,EA6BH;AACED,EAAAA,EAAE,EAAE,EADN;AAEEC,EAAAA,GAAG,EAAE;AAFP,CA7BG,CAFL;AAqCA,IAAMC,QAAQ,GAAGH,KAAK,CAACI,GAAN,CAAU,UAAAC,IAAI;AAAA,SAAIA,IAAI,CAACH,GAAT;AAAA,CAAd,CAAjB;;AAEA,IAAMI,iBAA0C,GAAG,SAA7CA,iBAA6C,GAAM;AACvD,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACI,GAAN,CAAU,UAAAC,IAAI;AAAA,WACb,MAAC,SAAD;AAAW,MAAA,GAAG,EAAEA,IAAI,CAACJ,EAArB;AAAyB,MAAA,KAAK,EAAC,MAA/B;AAAsC,MAAA,OAAO,EAAC,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGI,IAAI,CAACJ,EADR,CADa;AAAA,GAAd,CADH,CADF,CADF;AAWD,CAZD;;AAcA,IAAMM,oBAA6C,GAAG,SAAhDA,oBAAgD,GAAM;AAC1D,MAAMC,OAAO,GAAGT,gBAAgB,EAAhC;AACA,SACE,MAAC,OAAD;AAAS,IAAA,SAAS,EAAES,OAAO,CAACC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAED,OAAO,CAACE,KAA/B;AAAsC,IAAA,OAAO,EAAC,IAA9C;AAAmD,IAAA,EAAE,EAAC,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF;AAOD,CATD;;AAWA,IAAMC,iBAA0C,GAAG,SAA7CA,iBAA6C,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACnE,SACE,MAAC,SAAD;AACE,IAAA,SAAS,EAAEJ,OAAO,CAACH,IADrB;AAEE,IAAA,GAAG,EAAEQ,KAFP;AAGE,IAAA,EAAE,EAAEC,OAHN;AAIE,IAAA,SAAS,EAAC,IAJZ;AAKE,IAAA,KAAK,EAAC,KALR;AAME,IAAA,OAAO,EAAC,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGF,QARH,CADF;AAYD,CAbD;;AAeA,IAAMG,aAA0D,GAAG,SAA7DA,aAA6D,QAE7D;AAAA,MADJC,IACI,SADJA,IACI;AACJ,MAAMR,OAAO,GAAGV,SAAS,EAAzB;;AADI,wBAE4BZ,KAAK,CAAC+B,QAAN,CAA8B,EAA9B,CAF5B;AAAA;AAAA,MAEGC,QAFH;AAAA,MAEaC,WAFb;;AAAA,yBAGoBjC,KAAK,CAAC+B,QAAN,CAAe,CAAf,CAHpB;AAAA;AAAA,MAGGG,IAHH;AAAA,MAGSC,OAHT;;AAAA,yBAIkCnC,KAAK,CAAC+B,QAAN,CAAe,EAAf,CAJlC;AAAA;AAAA,MAIGK,WAJH;AAAA,MAIgBC,cAJhB;;AAMJ,SACE;AAAK,IAAA,SAAS,EAAEf,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAED,OAAO,CAACgB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAEhB,OAAO,CAACiB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,IAAI,CAACZ,GAAL,CAAS,UAACsB,GAAD,EAAMb,KAAN,EAAgB;AACxB,QAAMc,cAAc,GAAGT,QAAQ,CAACU,OAAT,CAAiBF,GAAG,CAACzB,EAArB,MAA6B,CAAC,CAArD;AACA,QAAMa,OAAO,qCAA8BD,KAA9B,CAAb;AACA,WACE,MAAC,QAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,OAAO,EAAE,mBAAM;AACb,YAAMgB,aAAa,GAAGX,QAAQ,CAACU,OAAT,CAAiBF,GAAG,CAACzB,EAArB,CAAtB;AACA,YAAI6B,WAA0B,GAAG,EAAjC;;AAEA,YAAID,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBC,UAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBb,QAAnB,EAA6BQ,GAAG,CAACzB,EAAjC,CAAd;AACD,SAFD,MAEO,IAAI4B,aAAa,KAAK,CAAtB,EAAyB;AAC9BC,UAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBb,QAAQ,CAACc,KAAT,CAAe,CAAf,CAAnB,CAAd;AACD,SAFM,MAEA,IAAIH,aAAa,KAAKX,QAAQ,CAACe,MAAT,GAAkB,CAAxC,EAA2C;AAChDH,UAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBb,QAAQ,CAACc,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAnB,CAAd;AACD,SAFM,MAEA,IAAIH,aAAa,GAAG,CAApB,EAAuB;AAC5BC,UAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CACZb,QAAQ,CAACc,KAAT,CAAe,CAAf,EAAkBH,aAAlB,CADY,EAEZX,QAAQ,CAACc,KAAT,CAAeH,aAAa,GAAG,CAA/B,CAFY,CAAd;AAID;;AAEDV,QAAAA,WAAW,CAACW,WAAD,CAAX;AACD,OApBH;AAqBE,MAAA,IAAI,EAAC,UArBP;AAsBE,sBAAcH,cAtBhB;AAuBE,MAAA,QAAQ,EAAE,CAAC,CAvBb;AAwBE,MAAA,GAAG,EAAED,GAAG,CAACzB,EAxBX;AAyBE,MAAA,QAAQ,EAAE0B,cAzBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA2BGxB,QAAQ,CAACC,GAAT,CAAa,UAAC8B,CAAD,EAAIrB,KAAJ,EAAc;AAC1B,UAAIqB,CAAC,KAAK,OAAV,EACE,OACE,MAAC,SAAD;AACE,QAAA,SAAS,EAAE1B,OAAO,CAACH,IADrB;AAEE,QAAA,GAAG,EAAEQ,KAFP;AAGE,QAAA,EAAE,EAAEC,OAHN;AAIE,QAAA,SAAS,EAAC,IAJZ;AAKE,QAAA,KAAK,EAAC,KALR;AAME,QAAA,OAAO,EAAC,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQG;AACDY,MAAAA,GAAG,CAACQ,CAAD,CAAH,CAAOH,MAAP,CAAc,IAAd,CATF,CADF,CADF,KAcK,IAAIG,CAAC,KAAK,QAAV,EACH,OACE,MAAC,SAAD;AACE,QAAA,SAAS,EAAE1B,OAAO,CAACH,IADrB;AAEE,QAAA,GAAG,EAAEQ,KAFP;AAGE,QAAA,EAAE,EAAEC,OAHN;AAIE,QAAA,SAAS,EAAC,IAJZ;AAKE,QAAA,KAAK,EAAC,KALR;AAME,QAAA,OAAO,EAAC,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,UAAhB;AAA2B,QAAA,KAAK,EAAC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,CADF,CADG,KAgBH,OACE,MAAC,SAAD;AACE,QAAA,SAAS,EAAEN,OAAO,CAACH,IADrB;AAEE,QAAA,GAAG,EAAEQ,KAFP;AAGE,QAAA,EAAE,EAAEC,OAHN;AAIE,QAAA,SAAS,EAAC,IAJZ;AAKE,QAAA,KAAK,EAAC,KALR;AAME,QAAA,OAAO,EAAC,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASI;AACAY,MAAAA,GAAG,CAACQ,CAAD,CAVP,CADF;AAeH,KA9CA,CA3BH,CADF;AA6ED,GAhFA,CADH,CAFF,CADF,CAFF,EA0FE,MAAC,eAAD;AACE,IAAA,kBAAkB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,CADtB;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,KAAK,EAAElB,IAAI,CAACiB,MAHd;AAIE,IAAA,WAAW,EAAEX,WAJf;AAKE,IAAA,IAAI,EAAEF,IALR;AAME,IAAA,YAAY,EAAE,sBAACe,CAAD,EAAIC,OAAJ,EAAgB;AAC5Bf,MAAAA,OAAO,CAACe,OAAD,CAAP;AACD,KARH;AASE,IAAA,mBAAmB,EAAE,6BAAAC,KAAK,EAAI;AAC5Bd,MAAAA,cAAc,CAACe,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,EAAqB,EAArB,CAAT,CAAd;AACAnB,MAAAA,OAAO,CAAC,CAAD,CAAP;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1FF,CADF,CADF;AA6GD,CArHD;;AAuHA,eAAeN,aAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Toolbar,\n  Typography,\n  Paper,\n  Button,\n} from '@material-ui/core';\nimport { VisitorTableRowProps, EnhancedTableProps } from '../../types';\nimport useStyles, { useToolbarStyles } from './style';\n\nconst cells: Array<Pick<VisitorTableRowProps, 'id'> & {\n  key: string | null;\n}> = [\n  {\n    id: 'ID',\n    key: 'id',\n  },\n  {\n    id: 'Beginn',\n    key: 'startDate',\n  },\n  {\n    id: 'Ende',\n    key: 'endDate',\n  },\n  {\n    id: 'Name',\n    key: 'name',\n  },\n  {\n    id: 'Vorname',\n    key: 'firstName',\n  },\n  {\n    id: 'E-Mail',\n    key: 'email',\n  },\n  {\n    id: 'RÃ¤ume',\n    key: 'rooms',\n  },\n  {\n    id: '',\n    key: 'action',\n  },\n];\n\nconst cellKeys = cells.map(cell => cell.key);\n\nconst EnhancedTableHead: React.FunctionComponent = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        {cells.map(cell => (\n          <TableCell key={cell.id} align=\"left\" padding=\"default\">\n            {cell.id}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nconst EnhancedTableToolbar: React.FunctionComponent = () => {\n  const classes = useToolbarStyles();\n  return (\n    <Toolbar className={classes.root}>\n      <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n        Besuche\n      </Typography>\n    </Toolbar>\n  );\n};\n\nconst EnhancedTableCell: React.FunctionComponent = ({ children }) => {\n  return (\n    <TableCell\n      className={classes.cell}\n      key={index}\n      id={labelId}\n      component=\"th\"\n      scope=\"row\"\n      padding=\"none\"\n    >\n      {children}\n    </TableCell>\n  );\n};\n\nconst EnhancedTable: React.FunctionComponent<EnhancedTableProps> = ({\n  rows,\n}) => {\n  const classes = useStyles();\n  const [selected, setSelected] = React.useState<Array<string>>([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar />\n        <TableContainer>\n          <Table className={classes.table}>\n            <EnhancedTableHead />\n            <TableBody>\n              {rows.map((row, index) => {\n                const isItemSelected = selected.indexOf(row.id) !== -1;\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    onClick={() => {\n                      const selectedIndex = selected.indexOf(row.id);\n                      let newSelected: Array<string> = [];\n\n                      if (selectedIndex === -1) {\n                        newSelected = newSelected.concat(selected, row.id);\n                      } else if (selectedIndex === 0) {\n                        newSelected = newSelected.concat(selected.slice(1));\n                      } else if (selectedIndex === selected.length - 1) {\n                        newSelected = newSelected.concat(selected.slice(0, -1));\n                      } else if (selectedIndex > 0) {\n                        newSelected = newSelected.concat(\n                          selected.slice(0, selectedIndex),\n                          selected.slice(selectedIndex + 1)\n                        );\n                      }\n\n                      setSelected(newSelected);\n                    }}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                  >\n                    {cellKeys.map((k, index) => {\n                      if (k === 'rooms')\n                        return (\n                          <TableCell\n                            className={classes.cell}\n                            key={index}\n                            id={labelId}\n                            component=\"th\"\n                            scope=\"row\"\n                            padding=\"none\"\n                          >\n                            {// @ts-ignore\n                            row[k].concat(', ')}\n                          </TableCell>\n                        );\n                      else if (k === 'action')\n                        return (\n                          <TableCell\n                            className={classes.cell}\n                            key={index}\n                            id={labelId}\n                            component=\"th\"\n                            scope=\"row\"\n                            padding=\"none\"\n                          >\n                            <Button variant=\"outlined\" color=\"secondary\">\n                              Abmelden\n                            </Button>\n                          </TableCell>\n                        );\n                      else\n                        return (\n                          <TableCell\n                            className={classes.cell}\n                            key={index}\n                            id={labelId}\n                            component=\"th\"\n                            scope=\"row\"\n                            padding=\"none\"\n                          >\n                            {\n                              // @ts-ignore\n                              row[k]\n                            }\n                          </TableCell>\n                        );\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[25, 50, 100]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={(_, newPage) => {\n            setPage(newPage);\n          }}\n          onChangeRowsPerPage={event => {\n            setRowsPerPage(parseInt(event.target.value, 10));\n            setPage(0);\n          }}\n        />\n      </Paper>\n    </div>\n  );\n};\n\nexport default EnhancedTable;\n"]},"metadata":{},"sourceType":"module"}