{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/stephangilli/projects/besuchernachweis/frontend/components/Table/index.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Toolbar, Typography, Paper, Checkbox } from '@material-ui/core';\nimport useStyles, { useToolbarStyles } from './style';\nvar cells = [{\n  id: 'ID'\n}, {\n  id: 'Beginn'\n}, {\n  id: 'Ende'\n}, {\n  id: 'Name'\n}, {\n  id: 'Vorname'\n}, {\n  id: 'E-Mail'\n}];\n\nvar EnhancedTableHead = function EnhancedTableHead(_ref) {\n  var onSelectAllClick = _ref.onSelectAllClick,\n      numSelected = _ref.numSelected,\n      rowCount = _ref.rowCount;\n  return __jsx(TableHead, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(TableCell, {\n    padding: \"checkbox\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(Checkbox, {\n    indeterminate: numSelected > 0 && numSelected < rowCount,\n    checked: rowCount > 0 && numSelected === rowCount,\n    onChange: onSelectAllClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })), cells.map(function (cell) {\n    return __jsx(TableCell, {\n      key: cell.id,\n      align: \"left\",\n      padding: \"default\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, cell.id);\n  })));\n};\n\nvar EnhancedTableToolbar = function EnhancedTableToolbar(_ref2) {\n  var numSelected = _ref2.numSelected;\n  var classes = useToolbarStyles();\n  return __jsx(Toolbar, {\n    className: clsx(classes.root, _defineProperty({}, classes.highlight, numSelected > 0)),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, numSelected > 0 ? __jsx(Typography, {\n    className: classes.title,\n    color: \"inherit\",\n    variant: \"subtitle1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, numSelected, \" ausgew\\xE4hlt\") : __jsx(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    id: \"tableTitle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Besuche\"));\n};\n\nvar EnhancedTable = function EnhancedTable(_ref3) {\n  var rows = _ref3.rows;\n  var classes = useStyles();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selected = _React$useState2[0],\n      setSelected = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      page = _React$useState4[0],\n      setPage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(25),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      rowsPerPage = _React$useState6[0],\n      setRowsPerPage = _React$useState6[1];\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(EnhancedTableToolbar, {\n    numSelected: selected.length,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), __jsx(TableContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, __jsx(EnhancedTableHead, {\n    numSelected: selected.length,\n    onSelectAllClick: function onSelectAllClick(event) {\n      if (event.target.checked) {\n        var newSelecteds = rows.map(function (n) {\n          return n.id;\n        });\n        setSelected(newSelecteds);\n        return;\n      }\n\n      setSelected([]);\n    },\n    rowCount: rows.length,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }), __jsx(TableBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, rows.map(function (row) {\n    var isItemSelected = selected.indexOf(row.id) !== -1;\n    return __jsx(TableRow, {\n      hover: true,\n      onClick: function onClick() {\n        var selectedIndex = selected.indexOf(row.id);\n        var newSelected = [];\n\n        if (selectedIndex === -1) {\n          newSelected = newSelected.concat(selected, row.id);\n        } else if (selectedIndex === 0) {\n          newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n          newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n          newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n      },\n      role: \"checkbox\",\n      \"aria-checked\": isItemSelected,\n      tabIndex: -1,\n      key: row.id,\n      selected: isItemSelected,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 19\n      }\n    }, __jsx(TableCell, {\n      padding: \"checkbox\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, __jsx(Checkbox, {\n      checked: isItemSelected,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 23\n      }\n    })), Object.keys(row).map(function (k) {\n      return __jsx(TableCell, {\n        key: k,\n        component: \"th\",\n        scope: \"row\",\n        padding: \"none\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 23\n        }\n      }, // @ts-ignore\n      row[k]);\n    }));\n  })))), __jsx(TablePagination, {\n    rowsPerPageOptions: [25, 50, 100],\n    component: \"div\",\n    count: rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: function onChangePage(_, newPage) {\n      setPage(newPage);\n    },\n    onChangeRowsPerPage: function onChangeRowsPerPage(event) {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default EnhancedTable;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/components/Table/index.tsx"],"names":["React","clsx","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Toolbar","Typography","Paper","Checkbox","useStyles","useToolbarStyles","cells","id","EnhancedTableHead","onSelectAllClick","numSelected","rowCount","map","cell","EnhancedTableToolbar","classes","root","highlight","title","EnhancedTable","rows","useState","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","paper","length","table","event","target","checked","newSelecteds","n","row","isItemSelected","indexOf","selectedIndex","newSelected","concat","slice","Object","keys","k","_","newPage","parseInt","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Toolbar,\n  Typography,\n  Paper,\n  Checkbox,\n} from '@material-ui/core';\nimport {\n  VisitorTableRowProps,\n  EnhancedTableToolbarProps,\n  EnhancedTableProps,\n} from '../../types';\nimport useStyles, { useToolbarStyles } from './style';\n\ntype EnhancedTableHeadProps = {\n  onSelectAllClick: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => void;\n  numSelected: number;\n  rowCount: number;\n};\n\nconst cells: Array<Pick<VisitorTableRowProps, 'id'>> = [\n  {\n    id: 'ID',\n  },\n  {\n    id: 'Beginn',\n  },\n  {\n    id: 'Ende',\n  },\n  {\n    id: 'Name',\n  },\n  {\n    id: 'Vorname',\n  },\n  {\n    id: 'E-Mail',\n  },\n];\n\nconst EnhancedTableHead: React.FunctionComponent<EnhancedTableHeadProps> = ({\n  onSelectAllClick,\n  numSelected,\n  rowCount,\n}) => {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n          />\n        </TableCell>\n        {cells.map(cell => (\n          <TableCell key={cell.id} align=\"left\" padding=\"default\">\n            {cell.id}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nconst EnhancedTableToolbar: React.FunctionComponent<EnhancedTableToolbarProps> = ({\n  numSelected,\n}) => {\n  const classes = useToolbarStyles();\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n        >\n          {numSelected} ausgewählt\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Besuche\n        </Typography>\n      )}\n    </Toolbar>\n  );\n};\n\nconst EnhancedTable: React.FunctionComponent<EnhancedTableProps> = ({\n  rows,\n}) => {\n  const classes = useStyles();\n  const [selected, setSelected] = React.useState<Array<string>>([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table className={classes.table}>\n            <EnhancedTableHead\n              numSelected={selected.length}\n              onSelectAllClick={event => {\n                if (event.target.checked) {\n                  const newSelecteds = rows.map(n => n.id);\n                  setSelected(newSelecteds);\n                  return;\n                }\n                setSelected([]);\n              }}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {rows.map(row => {\n                const isItemSelected = selected.indexOf(row.id) !== -1;\n                return (\n                  <TableRow\n                    hover\n                    onClick={() => {\n                      const selectedIndex = selected.indexOf(row.id);\n                      let newSelected: Array<string> = [];\n\n                      if (selectedIndex === -1) {\n                        newSelected = newSelected.concat(selected, row.id);\n                      } else if (selectedIndex === 0) {\n                        newSelected = newSelected.concat(selected.slice(1));\n                      } else if (selectedIndex === selected.length - 1) {\n                        newSelected = newSelected.concat(selected.slice(0, -1));\n                      } else if (selectedIndex > 0) {\n                        newSelected = newSelected.concat(\n                          selected.slice(0, selectedIndex),\n                          selected.slice(selectedIndex + 1)\n                        );\n                      }\n\n                      setSelected(newSelected);\n                    }}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox checked={isItemSelected} />\n                    </TableCell>\n                    {Object.keys(row).map(k => (\n                      <TableCell\n                        key={k}\n                        component=\"th\"\n                        scope=\"row\"\n                        padding=\"none\"\n                      >\n                        {\n                          // @ts-ignore\n                          row[k]\n                        }\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[25, 50, 100]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={(_, newPage) => {\n            setPage(newPage);\n          }}\n          onChangeRowsPerPage={event => {\n            setRowsPerPage(parseInt(event.target.value, 10));\n            setPage(0);\n          }}\n        />\n      </Paper>\n    </div>\n  );\n};\n\nexport default EnhancedTable;\n"]},"metadata":{},"sourceType":"module"}