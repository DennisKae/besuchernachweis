{"ast":null,"code":"var _jsxFileName = \"/Users/stephangilli/projects/besuchernachweis/frontend/components/Table/index.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Toolbar, Typography, Paper, IconButton, Checkbox, Tooltip } from '@material-ui/core';\nimport useTranslations from '../../hooks/useTranslations';\nimport useStyles, { useToolbarStyles } from './style';\n\nfunction formatValue(val) {\n  if (Array.isArray(val)) return val.join(', ');\n  return val;\n}\n\nconst EnhancedTable = ({\n  rows,\n  rowsPerPageOptions,\n  count,\n  rowsPerPage,\n  page,\n  onChangePage,\n  onChangeRowsPerPage,\n  onRowClick,\n  uniqueId,\n  toolbarSettings\n}) => {\n  if (rows.length === 0) return null; // state\n\n  const [selected, setSelected] = React.useState([]); // hooks\n\n  const {\n    t\n  } = useTranslations();\n  const classes = useStyles();\n  const cells = Object.keys(rows[0]).filter(r => r !== uniqueId).map(r => {\n    return {\n      key: r,\n      label: t(r)\n    };\n  });\n\n  const EnhancedTableHead = () => {\n    const numSelected = selected.length;\n    return __jsx(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, __jsx(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, __jsx(TableCell, {\n      padding: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, !onRowClick && __jsx(Checkbox, {\n      indeterminate: numSelected > 0 && numSelected < rowsPerPage,\n      checked: rowsPerPage > 0 && numSelected === rowsPerPage,\n      onChange: event => {\n        if (event.target.checked) setSelected(rows.map(row => row[uniqueId]));\n        setSelected([]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    })), cells.map(cell => __jsx(TableCell, {\n      key: cell.key,\n      align: \"left\",\n      padding: \"default\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, cell.label))));\n  };\n\n  const EnhancedTableToolbar = () => {\n    const numSelected = selected.length;\n    const classes = useToolbarStyles();\n    return __jsx(Toolbar, {\n      className: clsx(classes.root, {\n        [classes.highlight]: numSelected > 0\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, numSelected > 0 ? __jsx(Typography, {\n      className: classes.title,\n      color: \"inherit\",\n      variant: \"subtitle1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, numSelected, \" \", t('table-general-selected')) : __jsx(Typography, {\n      className: classes.title,\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, toolbarSettings.title), toolbarSettings.tooltipSelected && numSelected > 0 && __jsx(Tooltip, {\n      title: toolbarSettings.tooltipSelected.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, __jsx(IconButton, {\n      onClick: () => toolbarSettings.tooltipSelected.onClick(selected),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, toolbarSettings.tooltipSelected.icon)), toolbarSettings.tooltipUnselected && numSelected === 0 && __jsx(Tooltip, {\n      title: toolbarSettings.tooltipUnselected.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, __jsx(IconButton, {\n      onClick: () => toolbarSettings.tooltipUnselected.onClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, toolbarSettings.tooltipUnselected.icon)));\n  };\n\n  const EnhancedTableCell = ({\n    children\n  }) => {\n    const classes = useStyles();\n    return __jsx(TableCell, {\n      className: classes.cell,\n      component: \"th\",\n      scope: \"row\",\n      padding: \"none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, children);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, __jsx(EnhancedTableToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }), __jsx(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, __jsx(EnhancedTableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, rows.map((row, index) => {\n    const checked = selected.indexOf(row[uniqueId]) !== -1;\n    return __jsx(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: index,\n      onClick: () => {\n        const id = row[uniqueId];\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n        if (selectedIndex === -1) newSelected = newSelected.concat(selected, id);else if (selectedIndex === 0) newSelected = newSelected.concat(selected.slice(1));else if (selectedIndex === selected.length - 1) newSelected = newSelected.concat(selected.slice(0, -1));else if (selectedIndex > 0) {\n          newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n        setSelected(newSelected);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 19\n      }\n    }, !onRowClick && __jsx(TableCell, {\n      padding: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 23\n      }\n    }, __jsx(Checkbox, {\n      checked: checked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    })), cells.map((c, index) => {\n      if (c.key !== uniqueId) {\n        // @ts-ignore\n        const value = formatValue(row[c.key]);\n        return __jsx(EnhancedTableCell, {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 27\n          }\n        }, value);\n      }\n    }));\n  })))), __jsx(TablePagination, {\n    rowsPerPageOptions: rowsPerPageOptions,\n    labelRowsPerPage: t('table-general-rows-per-page'),\n    count: count,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    component: \"div\",\n    onChangePage: onChangePage,\n    onChangeRowsPerPage: onChangeRowsPerPage,\n    labelDisplayedRows: ({\n      from,\n      to,\n      count\n    }) => `${from}-${to} ${t('table-general-displayed-rows-of')} ${count}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default EnhancedTable;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/components/Table/index.tsx"],"names":["React","clsx","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Toolbar","Typography","Paper","IconButton","Checkbox","Tooltip","useTranslations","useStyles","useToolbarStyles","formatValue","val","Array","isArray","join","EnhancedTable","rows","rowsPerPageOptions","count","rowsPerPage","page","onChangePage","onChangeRowsPerPage","onRowClick","uniqueId","toolbarSettings","length","selected","setSelected","useState","t","classes","cells","Object","keys","filter","r","map","key","label","EnhancedTableHead","numSelected","event","target","checked","row","cell","EnhancedTableToolbar","root","highlight","title","tooltipSelected","onClick","icon","tooltipUnselected","EnhancedTableCell","children","paper","table","index","indexOf","id","selectedIndex","newSelected","concat","slice","c","value","from","to"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Toolbar,\n  Typography,\n  Paper,\n  IconButton,\n  Checkbox,\n  Tooltip,\n} from '@material-ui/core';\nimport useTranslations from '../../hooks/useTranslations';\nimport { EnhancedTableProps } from '../../types';\nimport useStyles, { useToolbarStyles } from './style';\n\nfunction formatValue(val: string | number | Array<any>) {\n  if (Array.isArray(val)) return val.join(', ');\n  return val;\n}\n\nconst EnhancedTable: React.FunctionComponent<EnhancedTableProps> = ({\n  rows,\n  rowsPerPageOptions,\n  count,\n  rowsPerPage,\n  page,\n  onChangePage,\n  onChangeRowsPerPage,\n  onRowClick,\n  uniqueId,\n  toolbarSettings,\n}) => {\n  if (rows.length === 0) return null;\n  // state\n  const [selected, setSelected] = React.useState<Array<string | number>>([]);\n\n  // hooks\n  const { t } = useTranslations();\n  const classes = useStyles();\n  const cells = Object.keys(rows[0])\n    .filter(r => r !== uniqueId)\n    .map(r => {\n      return { key: r, label: t(r) };\n    });\n\n  const EnhancedTableHead: React.FunctionComponent = () => {\n    const numSelected = selected.length;\n    return (\n      <TableHead>\n        <TableRow>\n          <TableCell padding=\"checkbox\">\n            {!onRowClick && (\n              <Checkbox\n                indeterminate={numSelected > 0 && numSelected < rowsPerPage}\n                checked={rowsPerPage > 0 && numSelected === rowsPerPage}\n                onChange={event => {\n                  if (event.target.checked)\n                    setSelected(rows.map(row => row[uniqueId]));\n                  setSelected([]);\n                }}\n              />\n            )}\n          </TableCell>\n          {cells.map(cell => (\n            <TableCell key={cell.key} align=\"left\" padding=\"default\">\n              {cell.label}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    );\n  };\n\n  const EnhancedTableToolbar: React.FunctionComponent = () => {\n    const numSelected = selected.length;\n    const classes = useToolbarStyles();\n    return (\n      <Toolbar\n        className={clsx(classes.root, {\n          [classes.highlight]: numSelected > 0,\n        })}\n      >\n        {numSelected > 0 ? (\n          <Typography\n            className={classes.title}\n            color=\"inherit\"\n            variant=\"subtitle1\"\n          >\n            {numSelected} {t('table-general-selected')}\n          </Typography>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\">\n            {toolbarSettings.title}\n          </Typography>\n        )}\n        {toolbarSettings.tooltipSelected && numSelected > 0 && (\n          <Tooltip title={toolbarSettings.tooltipSelected.title}>\n            <IconButton\n              onClick={() => toolbarSettings.tooltipSelected!.onClick(selected)}\n            >\n              {toolbarSettings.tooltipSelected.icon}\n            </IconButton>\n          </Tooltip>\n        )}\n        {toolbarSettings.tooltipUnselected && numSelected === 0 && (\n          <Tooltip title={toolbarSettings.tooltipUnselected.title}>\n            <IconButton\n              onClick={() => toolbarSettings.tooltipUnselected!.onClick()}\n            >\n              {toolbarSettings.tooltipUnselected.icon}\n            </IconButton>\n          </Tooltip>\n        )}\n      </Toolbar>\n    );\n  };\n\n  const EnhancedTableCell: React.FunctionComponent = ({ children }) => {\n    const classes = useStyles();\n    return (\n      <TableCell\n        className={classes.cell}\n        component=\"th\"\n        scope=\"row\"\n        padding=\"none\"\n      >\n        {children}\n      </TableCell>\n    );\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar />\n        <TableContainer>\n          <Table className={classes.table}>\n            <EnhancedTableHead />\n            <TableBody>\n              {rows.map((row, index) => {\n                const checked = selected.indexOf(row[uniqueId]) !== -1;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    tabIndex={-1}\n                    key={index}\n                    onClick={() => {\n                      const id = row[uniqueId];\n                      const selectedIndex = selected.indexOf(id);\n                      let newSelected: Array<string | number> = [];\n                      if (selectedIndex === -1)\n                        newSelected = newSelected.concat(selected, id);\n                      else if (selectedIndex === 0)\n                        newSelected = newSelected.concat(selected.slice(1));\n                      else if (selectedIndex === selected.length - 1)\n                        newSelected = newSelected.concat(selected.slice(0, -1));\n                      else if (selectedIndex > 0) {\n                        newSelected = newSelected.concat(\n                          selected.slice(0, selectedIndex),\n                          selected.slice(selectedIndex + 1)\n                        );\n                      }\n                      setSelected(newSelected);\n                    }}\n                  >\n                    {!onRowClick && (\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox checked={checked} />\n                      </TableCell>\n                    )}\n                    {cells.map((c, index) => {\n                      if (c.key !== uniqueId) {\n                        // @ts-ignore\n                        const value = formatValue(row[c.key]);\n                        return (\n                          <EnhancedTableCell key={index}>\n                            {value}\n                          </EnhancedTableCell>\n                        );\n                      }\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={rowsPerPageOptions}\n          labelRowsPerPage={t('table-general-rows-per-page')}\n          count={count}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          component=\"div\"\n          onChangePage={onChangePage}\n          onChangeRowsPerPage={onChangeRowsPerPage}\n          labelDisplayedRows={({ from, to, count }) =>\n            `${from}-${to} ${t('table-general-displayed-rows-of')} ${count}`\n          }\n        />\n      </Paper>\n    </div>\n  );\n};\n\nexport default EnhancedTable;\n"]},"metadata":{},"sourceType":"module"}