{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport moment from 'moment';\n\nconst visitorTableReducer = (state, action) => {\n  switch (action.type) {\n    case 'setVisitors':\n      {\n        if (action.payload.count) return _objectSpread({}, state, {\n          rows: action.payload.rows,\n          count: action.payload.count\n        });else return _objectSpread({}, state, {\n          rows: action.payload.rows\n        });\n      }\n\n    case 'changePage':\n      return _objectSpread({}, state, {\n        page: action.payload.page,\n        skip: action.payload.skip\n      });\n\n    case 'changeRowsPerPage':\n      return _objectSpread({}, state, {\n        limit: action.payload.limit\n      });\n\n    case 'setSearch':\n      {\n        return _objectSpread({}, state, {\n          search: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst DEFAULT_STATE = {\n  skip: 0,\n  limit: 50,\n  count: 0,\n  page: 0,\n  rows: [],\n  search: {\n    name: '',\n    firstName: '',\n    startDate: moment(new Date().setHours(0, 0, 0, 0)).toISOString(),\n    endDate: moment(new Date().setHours(24, 0, 0, 0)).subtract(1, 'minute').toISOString()\n  }\n};\nconst SEARCH_STATE_KEY = 'visitor_search_state';\n\nconst useSearchStateReducer = () => {\n  if (false) {\n    const [state, dispatch] = React.useReducer(visitorTableReducer, DEFAULT_STATE, defaultState => {\n      const persisted = localStorage.getItem(SEARCH_STATE_KEY);\n      if (persisted) return _objectSpread({}, defaultState, {\n        search: JSON.parse(persisted)\n      });\n      return defaultState;\n    });\n    React.useEffect(() => localStorage.setItem(SEARCH_STATE_KEY, JSON.stringify(state.search)), [state.search]);\n    return {\n      state,\n      dispatch\n    };\n  }\n\n  return null;\n};\n\nexport default useSearchStateReducer;","map":null,"metadata":{},"sourceType":"module"}