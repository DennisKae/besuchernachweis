{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/stephangilli/projects/besuchernachweis/frontend/context/RestContext.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Client from '../rest-client';\nvar RestContext = React.createContext({\n  client: null,\n  isLoading: false,\n  setIsLoading: function setIsLoading() {\n    return null;\n  },\n  setHasError: function setHasError() {\n    return null;\n  },\n  hasError: false\n});\nexport var RestProvider = function RestProvider(_ref) {\n  var url = _ref.url,\n      children = _ref.children;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      hasError = _React$useState4[0],\n      setHasError = _React$useState4[1];\n\n  var client = new Client(url);\n  return __jsx(RestContext.Provider, {\n    value: {\n      client: client,\n      isLoading: isLoading,\n      setIsLoading: setIsLoading,\n      setHasError: setHasError,\n      hasError: hasError\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport default RestContext;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/context/RestContext.tsx"],"names":["React","Client","RestContext","createContext","client","isLoading","setIsLoading","setHasError","hasError","RestProvider","url","children","useState"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAUA,IAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,CAAkC;AACpDC,EAAAA,MAAM,EAAE,IAD4C;AAEpDC,EAAAA,SAAS,EAAE,KAFyC;AAGpDC,EAAAA,YAAY,EAAE;AAAA,WAAM,IAAN;AAAA,GAHsC;AAIpDC,EAAAA,WAAW,EAAE;AAAA,WAAM,IAAN;AAAA,GAJuC;AAKpDC,EAAAA,QAAQ,EAAE;AAL0C,CAAlC,CAApB;AAQA,OAAO,IAAMC,YAAuC,GAAG,SAA1CA,YAA0C,OAAuB;AAAA,MAApBC,GAAoB,QAApBA,GAAoB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,wBAC1CX,KAAK,CAACY,QAAN,CAAwB,KAAxB,CAD0C;AAAA;AAAA,MACrEP,SADqE;AAAA,MAC1DC,YAD0D;;AAAA,yBAE5CN,KAAK,CAACY,QAAN,CAAwB,KAAxB,CAF4C;AAAA;AAAA,MAErEJ,QAFqE;AAAA,MAE3DD,WAF2D;;AAG5E,MAAMH,MAAM,GAAG,IAAIH,MAAJ,CAAWS,GAAX,CAAf;AAEA,SACE,MAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEN,MAAAA,MAAM,EAANA,MAAF;AAAUC,MAAAA,SAAS,EAATA,SAAV;AAAqBC,MAAAA,YAAY,EAAZA,YAArB;AAAmCC,MAAAA,WAAW,EAAXA,WAAnC;AAAgDC,MAAAA,QAAQ,EAARA;AAAhD,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGG,QAHH,CADF;AAOD,CAZM;AAcP,eAAeT,WAAf","sourcesContent":["import * as React from 'react';\nimport Client from '../rest-client';\n\ntype ContextProps = {\n  client: Client | null;\n  isLoading: boolean;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  hasError: boolean;\n  setHasError: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst RestContext = React.createContext<ContextProps>({\n  client: null,\n  isLoading: false,\n  setIsLoading: () => null,\n  setHasError: () => null,\n  hasError: false,\n});\n\nexport const RestProvider: React.FC<{ url: string }> = ({ url, children }) => {\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [hasError, setHasError] = React.useState<boolean>(false);\n  const client = new Client(url);\n\n  return (\n    <RestContext.Provider\n      value={{ client, isLoading, setIsLoading, setHasError, hasError }}\n    >\n      {children}\n    </RestContext.Provider>\n  );\n};\n\nexport default RestContext;\n"]},"metadata":{},"sourceType":"module"}