{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nexport var defaultLocale = 'en';\nexport var locales = ['en', 'de'];\nvar DEFAULT_LOCALE = 'en';\nexport function isLocale(tested) {\n  return locales.some(function (locale) {\n    return locale === tested;\n  });\n}\nexport function detectLocale(req) {\n  if (req) {\n    var acceptLanugage = req.headers['accept-language'];\n\n    if (acceptLanugage) {\n      var requestedLocales = acceptLanugage.split(',').map(function (part) {\n        var _part$trim$split = part.trim().split(';q='),\n            _part$trim$split2 = _slicedToArray(_part$trim$split, 2),\n            locale = _part$trim$split2[0],\n            priority = _part$trim$split2[1];\n\n        return {\n          locale: locale,\n          priority: parseInt(priority)\n        };\n      });\n      requestedLocales.sort(function (a, b) {\n        return b.priority - a.priority;\n      });\n      var found = requestedLocales.find(function (_ref) {\n        var locale = _ref.locale;\n        return locale !== '*';\n      });\n      if (!found) return DEFAULT_LOCALE;else {\n        var locale = found.locale.split('-')[0];\n        if (locales.includes(locale)) return locale;else return DEFAULT_LOCALE;\n      }\n    }\n  }\n\n  if (typeof navigator !== 'undefined') {\n    var _locale = navigator.languages[0].split('-')[0];\n    if (_locale && locales.includes(_locale)) return _locale;else return DEFAULT_LOCALE;\n  }\n\n  return DEFAULT_LOCALE;\n}","map":null,"metadata":{},"sourceType":"module"}