{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\n\nfunction tableReducer(state, action) {\n  switch (action.type) {\n    case 'setRows':\n      {\n        if (action.payload.count) return _objectSpread({}, state, {\n          rows: action.payload.rows,\n          count: action.payload.count\n        });else return _objectSpread({}, state, {\n          rows: action.payload.rows\n        });\n      }\n\n    case 'changePage':\n      return _objectSpread({}, state, {\n        page: action.payload.page,\n        skip: action.payload.skip\n      });\n\n    case 'changeRowsPerPage':\n      return _objectSpread({}, state, {\n        limit: action.payload.limit\n      });\n\n    case 'setSearch':\n      {\n        return _objectSpread({}, state, {\n          search: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_STATE = {\n  skip: 0,\n  limit: 50,\n  count: 0,\n  page: 0\n};\n\nfunction useSearchStateReducer() {\n  const [state, dispatch] = React.useReducer(tableReducer, // @ts-ignore\n  DEFAULT_STATE);\n  return {\n    state,\n    dispatch\n  };\n}\n\nexport default useSearchStateReducer;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/hooks/useVisitorSearchReducer.tsx"],"names":["React","tableReducer","state","action","type","payload","count","rows","page","skip","limit","search","DEFAULT_STATE","useSearchStateReducer","dispatch","useReducer"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA,SAASC,YAAT,CAA4BC,KAA5B,EAAsCC,MAAtC,EAA8D;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AAAgB;AACd,YAAID,MAAM,CAACE,OAAP,CAAeC,KAAnB,EACE,yBACKJ,KADL;AAEEK,UAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeE,IAFvB;AAGED,UAAAA,KAAK,EAAEH,MAAM,CAACE,OAAP,CAAeC;AAHxB,WADF,KAMK,yBAAYJ,KAAZ;AAAmBK,UAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeE;AAAxC;AACN;;AACD,SAAK,YAAL;AACE,+BAAYL,KAAZ;AAAmBM,QAAAA,IAAI,EAAEL,MAAM,CAACE,OAAP,CAAeG,IAAxC;AAA8CC,QAAAA,IAAI,EAAEN,MAAM,CAACE,OAAP,CAAeI;AAAnE;;AACF,SAAK,mBAAL;AACE,+BAAYP,KAAZ;AAAmBQ,QAAAA,KAAK,EAAEP,MAAM,CAACE,OAAP,CAAeK;AAAzC;;AACF,SAAK,WAAL;AAAkB;AAChB,iCAAYR,KAAZ;AAAmBS,UAAAA,MAAM,EAAER,MAAM,CAACE;AAAlC;AACD;;AAED;AACE,aAAOH,KAAP;AAnBJ;AAqBD;;AAED,MAAMU,aAAyB,GAAG;AAChCH,EAAAA,IAAI,EAAE,CAD0B;AAEhCC,EAAAA,KAAK,EAAE,EAFyB;AAGhCJ,EAAAA,KAAK,EAAE,CAHyB;AAIhCE,EAAAA,IAAI,EAAE;AAJ0B,CAAlC;;AAOA,SAASK,qBAAT,GAAiC;AAC/B,QAAM,CAACX,KAAD,EAAQY,QAAR,IAAoBd,KAAK,CAACe,UAAN,CACxBd,YADwB,EAExB;AACAW,EAAAA,aAHwB,CAA1B;AAMA,SAAO;AAAEV,IAAAA,KAAF;AAASY,IAAAA;AAAT,GAAP;AACD;;AAED,eAAeD,qBAAf","sourcesContent":["import * as React from 'react';\nimport { TableState, TableAction } from '../types';\n\nfunction tableReducer<S, R>(state: S, action: TableAction<R>) {\n  switch (action.type) {\n    case 'setRows': {\n      if (action.payload.count)\n        return {\n          ...state,\n          rows: action.payload.rows,\n          count: action.payload.count,\n        };\n      else return { ...state, rows: action.payload.rows };\n    }\n    case 'changePage':\n      return { ...state, page: action.payload.page, skip: action.payload.skip };\n    case 'changeRowsPerPage':\n      return { ...state, limit: action.payload.limit };\n    case 'setSearch': {\n      return { ...state, search: action.payload };\n    }\n\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_STATE: TableState = {\n  skip: 0,\n  limit: 50,\n  count: 0,\n  page: 0,\n};\n\nfunction useSearchStateReducer() {\n  const [state, dispatch] = React.useReducer(\n    tableReducer,\n    // @ts-ignore\n    DEFAULT_STATE\n  );\n\n  return { state, dispatch };\n}\n\nexport default useSearchStateReducer;\n"]},"metadata":{},"sourceType":"module"}