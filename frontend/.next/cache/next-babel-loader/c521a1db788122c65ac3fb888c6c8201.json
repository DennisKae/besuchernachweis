{"ast":null,"code":"var _jsxFileName = \"/Users/stephangilli/projects/besuchernachweis/frontend/components/Table/index.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Toolbar, Typography, Paper, Checkbox } from '@material-ui/core';\nimport useStyles, { useToolbarStyles } from './style';\nconst cells = [{\n  id: 'ID'\n}, {\n  id: 'Name'\n}, {\n  id: 'Vorname'\n}, {\n  id: 'E-Mail'\n}, {\n  id: 'yy'\n}];\n\nconst EnhancedTableHead = ({\n  onSelectAllClick,\n  numSelected,\n  rowCount\n}) => {\n  return __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(TableCell, {\n    padding: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(Checkbox, {\n    indeterminate: numSelected > 0 && numSelected < rowCount,\n    checked: rowCount > 0 && numSelected === rowCount,\n    onChange: onSelectAllClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  })), cells.map(cell => __jsx(TableCell, {\n    key: cell.id,\n    align: \"left\",\n    padding: \"default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, cell.id))));\n};\n\nconst EnhancedTableToolbar = ({\n  numSelected\n}) => {\n  const classes = useToolbarStyles();\n  return __jsx(Toolbar, {\n    className: clsx(classes.root, {\n      [classes.highlight]: numSelected > 0\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, numSelected > 0 ? __jsx(Typography, {\n    className: classes.title,\n    color: \"inherit\",\n    variant: \"subtitle1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, numSelected, \" ausgew\\xE4hlt\") : __jsx(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    id: \"tableTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Besuche\"));\n};\n\nconst EnhancedTable = ({\n  rows\n}) => {\n  const classes = useStyles();\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(EnhancedTableToolbar, {\n    numSelected: selected.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), __jsx(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(EnhancedTableHead, {\n    numSelected: selected.length,\n    onSelectAllClick: event => {\n      if (event.target.checked) {\n        const newSelecteds = rows.map(n => n.id);\n        setSelected(newSelecteds);\n        return;\n      }\n\n      setSelected([]);\n    },\n    rowCount: rows.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, rows.map((row, index) => {\n    const isItemSelected = selected.indexOf(row.id) !== -1;\n    const labelId = `enhanced-table-checkbox-${index}`;\n    return __jsx(TableRow, {\n      hover: true,\n      onClick: () => {\n        const selectedIndex = selected.indexOf(row.id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n          newSelected = newSelected.concat(selected, row.id);\n        } else if (selectedIndex === 0) {\n          newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n          newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n          newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n      },\n      role: \"checkbox\",\n      \"aria-checked\": isItemSelected,\n      tabIndex: -1,\n      key: row.id,\n      selected: isItemSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }, __jsx(TableCell, {\n      padding: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }, __jsx(Checkbox, {\n      checked: isItemSelected,\n      inputProps: {\n        'aria-labelledby': labelId\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 23\n      }\n    })), __jsx(TableCell, {\n      component: \"th\",\n      id: labelId,\n      scope: \"row\",\n      padding: \"none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, row.id));\n  })))), __jsx(TablePagination, {\n    rowsPerPageOptions: [25, 50, 100],\n    component: \"div\",\n    count: rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: (_, newPage) => {\n      setPage(newPage);\n    },\n    onChangeRowsPerPage: event => {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default EnhancedTable;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/components/Table/index.tsx"],"names":["React","clsx","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Toolbar","Typography","Paper","Checkbox","useStyles","useToolbarStyles","cells","id","EnhancedTableHead","onSelectAllClick","numSelected","rowCount","map","cell","EnhancedTableToolbar","classes","root","highlight","title","EnhancedTable","rows","selected","setSelected","useState","page","setPage","rowsPerPage","setRowsPerPage","paper","length","table","event","target","checked","newSelecteds","n","row","index","isItemSelected","indexOf","labelId","selectedIndex","newSelected","concat","slice","_","newPage","parseInt","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Toolbar,\n  Typography,\n  Paper,\n  Checkbox,\n} from '@material-ui/core';\nimport useStyles, { useToolbarStyles } from './style';\n\ntype EnhancedTableHeadProps = {\n  onSelectAllClick: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => void;\n  numSelected: number;\n  rowCount: number;\n};\n\nconst cells = [\n  {\n    id: 'ID',\n  },\n  {\n    id: 'Name',\n  },\n  {\n    id: 'Vorname',\n  },\n  {\n    id: 'E-Mail',\n  },\n  {\n    id: 'yy',\n  },\n];\n\nconst EnhancedTableHead: React.FunctionComponent<EnhancedTableHeadProps> = ({\n  onSelectAllClick,\n  numSelected,\n  rowCount,\n}) => {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n          />\n        </TableCell>\n        {cells.map(cell => (\n          <TableCell key={cell.id} align=\"left\" padding=\"default\">\n            {cell.id}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport type EnhancedTableToolbarProps = {\n  numSelected: number;\n};\n\nconst EnhancedTableToolbar: React.FunctionComponent<EnhancedTableToolbarProps> = ({\n  numSelected,\n}) => {\n  const classes = useToolbarStyles();\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n        >\n          {numSelected} ausgewählt\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Besuche\n        </Typography>\n      )}\n    </Toolbar>\n  );\n};\n\nexport type EnhancedTableProps = {\n  rows: Array<{\n    id: string;\n  }>;\n};\n\nconst EnhancedTable: React.FunctionComponent<EnhancedTableProps> = ({\n  rows,\n}) => {\n  const classes = useStyles();\n  const [selected, setSelected] = React.useState<Array<string>>([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table className={classes.table}>\n            <EnhancedTableHead\n              numSelected={selected.length}\n              onSelectAllClick={event => {\n                if (event.target.checked) {\n                  const newSelecteds = rows.map(n => n.id);\n                  setSelected(newSelecteds);\n                  return;\n                }\n                setSelected([]);\n              }}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {rows.map((row, index) => {\n                const isItemSelected = selected.indexOf(row.id) !== -1;\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    onClick={() => {\n                      const selectedIndex = selected.indexOf(row.id);\n                      let newSelected: Array<string> = [];\n\n                      if (selectedIndex === -1) {\n                        newSelected = newSelected.concat(selected, row.id);\n                      } else if (selectedIndex === 0) {\n                        newSelected = newSelected.concat(selected.slice(1));\n                      } else if (selectedIndex === selected.length - 1) {\n                        newSelected = newSelected.concat(selected.slice(0, -1));\n                      } else if (selectedIndex > 0) {\n                        newSelected = newSelected.concat(\n                          selected.slice(0, selectedIndex),\n                          selected.slice(selectedIndex + 1)\n                        );\n                      }\n\n                      setSelected(newSelected);\n                    }}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isItemSelected}\n                        inputProps={{ 'aria-labelledby': labelId }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      component=\"th\"\n                      id={labelId}\n                      scope=\"row\"\n                      padding=\"none\"\n                    >\n                      {row.id}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[25, 50, 100]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={(_, newPage) => {\n            setPage(newPage);\n          }}\n          onChangeRowsPerPage={event => {\n            setRowsPerPage(parseInt(event.target.value, 10));\n            setPage(0);\n          }}\n        />\n      </Paper>\n    </div>\n  );\n};\n\nexport default EnhancedTable;\n"]},"metadata":{},"sourceType":"module"}