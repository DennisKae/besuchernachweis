{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Grid, Typography, TextField, Input, Button, Card, CardContent } from '@material-ui/core';\nimport useVisitorSearchReducer from '../../hooks/useVisitorSearchReducer';\nimport useTranslations from '../../hooks/useTranslations';\nimport Table from '../Table';\nimport StatsCard from '../StatsCard';\nimport useStyles from './style';\n\nconst Dashboard = () => {\n  const reducer = useVisitorSearchReducer();\n  if (!reducer) return null;\n  const {\n    state: {\n      skip,\n      limit,\n      count,\n      page,\n      rows,\n      search\n    },\n    dispatch\n  } = reducer;\n  React.useEffect(() => {\n    async function getVisitors() {\n      try {\n        const res = await fetch('http://ec2-3-127-244-90.eu-central-1.compute.amazonaws.com/api/Besuch/GetByFilter', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            vorname: 'Max',\n            name: 'Mustermann',\n            datumVon: search.startDate,\n            datumBis: search.endDate\n          })\n        });\n\n        if (res.ok) {\n          const data = await res.json();\n          console.log(data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    getVisitors();\n  }, []);\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslations();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"body1\"\n  }, t('administration')), __jsx(Typography, {\n    variant: \"h6\"\n  }, t('visitor-cancle'))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  })), __jsx(Grid, {\n    container: true,\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    lg: 3,\n    xl: 3\n  }, __jsx(StatsCard, {\n    title: t('visitor-count-for-period'),\n    value: \"200\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    lg: 3,\n    xl: 3\n  }, __jsx(StatsCard, {\n    title: t('visitor-count-current-registered'),\n    value: `${rows.length}`\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    lg: 3,\n    xl: 3,\n    alignItems: \"center\"\n  }, __jsx(Card, null, __jsx(CardContent, null, __jsx(Input, {\n    placeholder: t('search-name'),\n    style: {\n      width: '100%'\n    },\n    value: search.firstName,\n    onChange: event => dispatch({\n      type: 'setSearch',\n      payload: _objectSpread({}, search, {\n        firstName: event.target.value\n      })\n    })\n  }), __jsx(\"div\", {\n    style: {\n      marginTop: '8px'\n    }\n  }), __jsx(Input, {\n    placeholder: t('search-first-name'),\n    style: {\n      width: '100%'\n    },\n    value: search.name,\n    onChange: event => dispatch({\n      type: 'setSearch',\n      payload: _objectSpread({}, search, {\n        name: event.target.value\n      })\n    })\n  }), __jsx(\"div\", {\n    style: {\n      marginTop: '8px'\n    }\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\"\n  }, t('search-apply'))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    lg: 3,\n    xl: 3,\n    alignItems: \"center\"\n  }, __jsx(Card, null, __jsx(CardContent, null, __jsx(Grid, {\n    container: true,\n    justify: \"flex-start\"\n  }, __jsx(TextField, {\n    style: {\n      paddingRight: '12px'\n    },\n    label: t('search-start-date'),\n    type: \"datetime-local\",\n    defaultValue: search.startDate,\n    onChange: event => dispatch({\n      type: 'setSearch',\n      payload: _objectSpread({}, search, {\n        startDate: event.target.value\n      })\n    })\n  }), __jsx(TextField, {\n    label: t('search-end-date'),\n    type: \"datetime-local\",\n    defaultValue: search.endDate,\n    onChange: event => {\n      dispatch({\n        type: 'setSearch',\n        payload: _objectSpread({}, search, {\n          endDate: event.target.value\n        })\n      });\n    }\n  })))))), __jsx(Grid, {\n    container: true,\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Table, {\n    rows: rows,\n    rowsPerPageOptions: [25, 50, 100],\n    count: count,\n    rowsPerPage: limit,\n    page: page,\n    onChangePage: (_, newPage) => {\n      const newSkip = newPage > page ? skip + limit : skip - limit;\n      dispatch({\n        type: 'changePage',\n        payload: {\n          skip: newSkip,\n          page: newPage\n        }\n      });\n    },\n    onChangeRowsPerPage: event => {\n      const limit = Number(event.target.value);\n      dispatch({\n        type: 'changeRowsPerPage',\n        payload: {\n          limit\n        }\n      });\n    },\n    displayOnly: false,\n    onClickRow: val => console.log(val),\n    buttonLabel: \"Abmelden\"\n  }))));\n};\n\nexport default Dashboard;","map":null,"metadata":{},"sourceType":"module"}