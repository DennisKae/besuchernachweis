{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport moment from 'moment';\n\nvar visitorTableReducer = function visitorTableReducer(state, action) {\n  switch (action.type) {\n    case 'setVisitors':\n      {\n        if (action.payload.count) return _objectSpread({}, state, {\n          rows: action.payload.rows,\n          count: action.payload.count\n        });else return _objectSpread({}, state, {\n          rows: action.payload.rows\n        });\n      }\n\n    case 'changePage':\n      return _objectSpread({}, state, {\n        page: action.payload.page,\n        skip: action.payload.skip\n      });\n\n    case 'changeRowsPerPage':\n      return _objectSpread({}, state, {\n        limit: action.payload.limit\n      });\n\n    case 'setSearch':\n      {\n        return _objectSpread({}, state, {\n          search: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar DEFAULT_STATE = {\n  skip: 0,\n  limit: 50,\n  count: 0,\n  page: 0,\n  rows: [],\n  search: {\n    name: '',\n    firstName: '',\n    startDate: moment(new Date().setHours(0, 0, 0, 0)).format('YYYY-MM-DDTHH:mm'),\n    endDate: moment(new Date().setHours(24, 0, 0, 0)).subtract(1, 'minute').format('YYYY-MM-DDTHH:mm')\n  }\n};\nvar SEARCH_STATE_KEY = 'visitor_search_state';\n\nvar useSearchStateReducer = function useSearchStateReducer() {\n  if (true) {\n    var _React$useReducer = React.useReducer(visitorTableReducer, DEFAULT_STATE, function (defaultState) {\n      var persisted = localStorage.getItem(SEARCH_STATE_KEY);\n      if (persisted) return _objectSpread({}, defaultState, {\n        search: JSON.parse(persisted)\n      });\n      return defaultState;\n    }),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n    React.useEffect(function () {\n      return localStorage.setItem(SEARCH_STATE_KEY, JSON.stringify(state.search));\n    }, [state.search]);\n    return {\n      state: state,\n      dispatch: dispatch\n    };\n  }\n\n  return null;\n};\n\nexport default useSearchStateReducer;","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/hooks/useVisitorSearchReducer.tsx"],"names":["React","moment","visitorTableReducer","state","action","type","payload","count","rows","page","skip","limit","search","DEFAULT_STATE","name","firstName","startDate","Date","setHours","format","endDate","subtract","SEARCH_STATE_KEY","useSearchStateReducer","useReducer","defaultState","persisted","localStorage","getItem","JSON","parse","dispatch","useEffect","setItem","stringify"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport moment from 'moment';\nimport { VisitorTableState, VisitorTableAction } from '../types';\n\nconst visitorTableReducer = (\n  state: VisitorTableState,\n  action: VisitorTableAction\n) => {\n  switch (action.type) {\n    case 'setVisitors': {\n      if (action.payload.count)\n        return {\n          ...state,\n          rows: action.payload.rows,\n          count: action.payload.count,\n        };\n      else return { ...state, rows: action.payload.rows };\n    }\n    case 'changePage':\n      return { ...state, page: action.payload.page, skip: action.payload.skip };\n    case 'changeRowsPerPage':\n      return { ...state, limit: action.payload.limit };\n    case 'setSearch': {\n      return { ...state, search: action.payload };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst DEFAULT_STATE: VisitorTableState = {\n  skip: 0,\n  limit: 50,\n  count: 0,\n  page: 0,\n  rows: [],\n  search: {\n    name: '',\n    firstName: '',\n    startDate: moment(new Date().setHours(0, 0, 0, 0)).format(\n      'YYYY-MM-DDTHH:mm'\n    ),\n    endDate: moment(new Date().setHours(24, 0, 0, 0))\n      .subtract(1, 'minute')\n      .format('YYYY-MM-DDTHH:mm'),\n  },\n};\n\nconst SEARCH_STATE_KEY = 'visitor_search_state';\n\nconst useSearchStateReducer = () => {\n  if (typeof window !== 'undefined') {\n    const [state, dispatch] = React.useReducer(\n      visitorTableReducer,\n      DEFAULT_STATE,\n      defaultState => {\n        const persisted = localStorage.getItem(SEARCH_STATE_KEY);\n        if (persisted)\n          return { ...defaultState, search: JSON.parse(persisted) };\n        return defaultState;\n      }\n    );\n\n    React.useEffect(\n      () =>\n        localStorage.setItem(SEARCH_STATE_KEY, JSON.stringify(state.search)),\n      [state.search]\n    );\n    return { state, dispatch };\n  }\n  return null;\n};\n\nexport default useSearchStateReducer;\n"]},"metadata":{},"sourceType":"module"}