{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fetch from 'isomorphic-unfetch';\n\nfunction fetcher(baseURL) {\n  async function fetchRessource(url, fetchOptions) {\n    const u = `${baseURL}${url}`;\n\n    try {\n      const xhr = await fetch(u, fetchOptions);\n\n      if (xhr.ok) {\n        return xhr.json();\n      }\n    } catch (error) {\n      throw new Error(`Unexpected error during fetch of URL ${u}: ${error}`);\n    }\n  }\n\n  return fetchRessource;\n}\n\nexport default class RestClient {\n  constructor(url) {\n    _defineProperty(this, \"fetcher\", void 0);\n\n    this.fetcher = fetcher(url);\n  }\n\n  async login(props) {\n    return this.fetcher(`/Auth/Login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(props)\n    });\n  }\n\n  async register(props) {\n    return this.fetcher(`/Auth/Register`, {\n      method: 'POST',\n      hedaders: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(props)\n    });\n  }\n\n  async besuch(props) {\n    return this.fetcher(`/Besuch`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(props)\n    });\n  }\n\n  async setEndzeitpunkt(props) {\n    return this.fetcher(`/Besuch/SetEndzeitpunkt`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/jsoon'\n      },\n      body: JSON.stringify(props)\n    });\n  }\n\n  async getByFilter(props) {\n    return this.fetcher(`/Besuch/GetByFilter`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(props)\n    });\n  }\n\n  async postBesucher(props) {\n    return this.fetcher(`/Besucher`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(props)\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/stephangilli/projects/besuchernachweis/frontend/rest-client/index.tsx"],"names":["fetch","fetcher","baseURL","fetchRessource","url","fetchOptions","u","xhr","ok","json","error","Error","RestClient","constructor","login","props","method","headers","body","JSON","stringify","register","hedaders","besuch","setEndzeitpunkt","getByFilter","postBesucher"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,OAAT,CAAiBC,OAAjB,EAAkC;AAChC,iBAAeC,cAAf,CACEC,GADF,EAEEC,YAFF,EAGgB;AACd,UAAMC,CAAC,GAAI,GAAEJ,OAAQ,GAAEE,GAAI,EAA3B;;AACA,QAAI;AACF,YAAMG,GAAG,GAAG,MAAMP,KAAK,CAACM,CAAD,EAAID,YAAJ,CAAvB;;AACA,UAAIE,GAAG,CAACC,EAAR,EAAY;AACV,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;AACF,KALD,CAKE,OAAOC,KAAP,EAAc;AACd,YAAM,IAAIC,KAAJ,CAAW,wCAAuCL,CAAE,KAAII,KAAM,EAA9D,CAAN;AACD;AACF;;AACD,SAAOP,cAAP;AACD;;AAED,eAAe,MAAMS,UAAN,CAAiB;AAE9BC,EAAAA,WAAW,CAACT,GAAD,EAAc;AAAA;;AACvB,SAAKH,OAAL,GAAeA,OAAO,CAACG,GAAD,CAAtB;AACD;;AACD,QAAMU,KAAN,CAAYC,KAAZ,EAAwD;AACtD,WAAO,KAAKd,OAAL,CAAc,aAAd,EAA4B;AACjCe,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFwB;AAKjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AAL2B,KAA5B,CAAP;AAOD;;AACD,QAAMM,QAAN,CAAeN,KAAf,EAIG;AACD,WAAO,KAAKd,OAAL,CAAc,gBAAd,EAA+B;AACpCe,MAAAA,MAAM,EAAE,MAD4B;AAEpCM,MAAAA,QAAQ,EAAE;AACR,wBAAgB;AADR,OAF0B;AAKpCJ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AAL8B,KAA/B,CAAP;AAOD;;AACD,QAAMQ,MAAN,CAAaR,KAAb,EAAwE;AACtE,WAAO,KAAKd,OAAL,CAAc,SAAd,EAAwB;AAC7Be,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFoB;AAK7BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AALuB,KAAxB,CAAP;AAOD;;AACD,QAAMS,eAAN,CAAsBT,KAAtB,EAA8D;AAC5D,WAAO,KAAKd,OAAL,CAAc,yBAAd,EAAwC;AAC7Ce,MAAAA,MAAM,EAAE,KADqC;AAE7CC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFoC;AAK7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AALuC,KAAxC,CAAP;AAOD;;AACD,QAAMU,WAAN,CAAkBV,KAAlB,EAKG;AACD,WAAO,KAAKd,OAAL,CAAc,qBAAd,EAAoC;AACzCe,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFgC;AAKzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AALmC,KAApC,CAAP;AAOD;;AACD,QAAMW,YAAN,CAAmBX,KAAnB,EAGG;AACD,WAAO,KAAKd,OAAL,CAAc,WAAd,EAA0B;AAC/Be,MAAAA,MAAM,EAAE,MADuB;AAE/BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFsB;AAK/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AALyB,KAA1B,CAAP;AAOD;;AAtE6B","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nfunction fetcher(baseURL: string) {\n  async function fetchRessource(\n    url: string,\n    fetchOptions?: object\n  ): Promise<any> {\n    const u = `${baseURL}${url}`;\n    try {\n      const xhr = await fetch(u, fetchOptions);\n      if (xhr.ok) {\n        return xhr.json();\n      }\n    } catch (error) {\n      throw new Error(`Unexpected error during fetch of URL ${u}: ${error}`);\n    }\n  }\n  return fetchRessource;\n}\n\nexport default class RestClient {\n  fetcher: (url: string, options?: any) => Promise<any>;\n  constructor(url: string) {\n    this.fetcher = fetcher(url);\n  }\n  async login(props: { email: string; password: string }) {\n    return this.fetcher(`/Auth/Login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(props),\n    });\n  }\n  async register(props: {\n    sicherheitsfrage: string;\n    rolle: string;\n    person: { name: string; vorname: string; email: string; telefon: string };\n  }) {\n    return this.fetcher(`/Auth/Register`, {\n      method: 'POST',\n      hedaders: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(props),\n    });\n  }\n  async besuch(props: { besucher: Array<number>; raumer: Array<number> }) {\n    return this.fetcher(`/Besuch`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(props),\n    });\n  }\n  async setEndzeitpunkt(props: { id: string; endzeit: string }) {\n    return this.fetcher(`/Besuch/SetEndzeitpunkt`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/jsoon',\n      },\n      body: JSON.stringify(props),\n    });\n  }\n  async getByFilter(props: {\n    datumVon: string;\n    datumBis: string;\n    name: string;\n    vorname: string;\n  }) {\n    return this.fetcher(`/Besuch/GetByFilter`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(props),\n    });\n  }\n  async postBesucher(props: {\n    person: { name: string; vorname: string; email: string; telefon: string };\n    gesundheitsstatus: string;\n  }) {\n    return this.fetcher(`/Besucher`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(props),\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}