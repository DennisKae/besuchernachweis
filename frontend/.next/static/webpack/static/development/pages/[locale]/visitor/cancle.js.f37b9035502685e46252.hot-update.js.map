{"version":3,"file":"static/webpack/static/development/pages/[locale]/visitor/cancle.js.f37b9035502685e46252.hot-update.js","sources":["webpack:///./components/Table/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Toolbar,\n  Typography,\n  Paper,\n  IconButton,\n  Checkbox,\n  Tooltip,\n} from '@material-ui/core';\nimport useTranslations from '../../hooks/useTranslations';\nimport { EnhancedTableProps } from '../../types';\nimport useStyles, { useToolbarStyles } from './style';\n\nfunction formatValue(val: string | number | Array<any>) {\n  if (Array.isArray(val)) return val.join(', ');\n  return val;\n}\n\nconst EnhancedTable: React.FunctionComponent<EnhancedTableProps> = ({\n  rows,\n  rowsPerPageOptions,\n  count,\n  rowsPerPage,\n  page,\n  onChangePage,\n  onChangeRowsPerPage,\n  onRowClick,\n  uniqueId,\n  toolbarSettings,\n}) => {\n  if (rows.length === 0) return null;\n  // state\n  const [selected, setSelected] = React.useState<Array<string | number>>([]);\n\n  // hooks\n  const { t } = useTranslations();\n  const classes = useStyles();\n  const cells = Object.keys(rows[0])\n    .filter(r => r !== uniqueId)\n    .map(r => {\n      return { key: r, label: t(r) };\n    });\n\n  const EnhancedTableHead: React.FunctionComponent = () => {\n    const numSelected = selected.length;\n    return (\n      <TableHead>\n        <TableRow>\n          <TableCell padding=\"checkbox\">\n            {!onRowClick && (\n              <Checkbox\n                indeterminate={numSelected > 0 && numSelected < rowsPerPage}\n                checked={rowsPerPage > 0 && numSelected === rowsPerPage}\n                onChange={event => {\n                  if (event.target.checked)\n                    setSelected(rows.map(row => row[uniqueId]));\n                  setSelected([]);\n                }}\n              />\n            )}\n          </TableCell>\n          {cells.map(cell => (\n            <TableCell key={cell.key} align=\"left\" padding=\"default\">\n              {cell.label}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    );\n  };\n\n  const EnhancedTableToolbar: React.FunctionComponent = () => {\n    const numSelected = selected.length;\n    const classes = useToolbarStyles();\n    return (\n      <Toolbar\n        className={clsx(classes.root, {\n          [classes.highlight]: numSelected > 0,\n        })}\n      >\n        {numSelected > 0 ? (\n          <Typography\n            className={classes.title}\n            color=\"inherit\"\n            variant=\"subtitle1\"\n          >\n            {numSelected} {t('table-general-selected')}\n          </Typography>\n        ) : (\n          <Typography className={classes.title} variant=\"h6\">\n            {toolbarSettings.title}\n          </Typography>\n        )}\n        {toolbarSettings.tooltipSelected && numSelected > 0 && (\n          <Tooltip title={toolbarSettings.tooltipSelected.title}>\n            <IconButton\n              onClick={() => toolbarSettings.tooltipSelected!.onClick(selected)}\n            >\n              {toolbarSettings.tooltipSelected.icon}\n            </IconButton>\n          </Tooltip>\n        )}\n        {toolbarSettings.tooltipUnselected && numSelected === 0 && (\n          <Tooltip title={toolbarSettings.tooltipUnselected.title}>\n            <IconButton\n              onClick={() => toolbarSettings.tooltipUnselected!.onClick()}\n            >\n              {toolbarSettings.tooltipUnselected.icon}\n            </IconButton>\n          </Tooltip>\n        )}\n      </Toolbar>\n    );\n  };\n\n  const EnhancedTableCell: React.FunctionComponent = ({ children }) => {\n    const classes = useStyles();\n    return (\n      <TableCell\n        className={classes.cell}\n        component=\"th\"\n        scope=\"row\"\n        padding=\"none\"\n      >\n        {children}\n      </TableCell>\n    );\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar />\n        <TableContainer>\n          <Table className={classes.table}>\n            <EnhancedTableHead />\n            <TableBody>\n              {rows.map((row, index) => {\n                const checked = selected.indexOf(row[uniqueId]) !== -1;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    tabIndex={-1}\n                    key={index}\n                    onClick={() => {\n                      const id = row[uniqueId];\n                      const selectedIndex = selected.indexOf(id);\n                      let newSelected: Array<string | number> = [];\n                      if (selectedIndex === -1)\n                        newSelected = newSelected.concat(selected, id);\n                      else if (selectedIndex === 0)\n                        newSelected = newSelected.concat(selected.slice(1));\n                      else if (selectedIndex === selected.length - 1)\n                        newSelected = newSelected.concat(selected.slice(0, -1));\n                      else if (selectedIndex > 0) {\n                        newSelected = newSelected.concat(\n                          selected.slice(0, selectedIndex),\n                          selected.slice(selectedIndex + 1)\n                        );\n                      }\n                      setSelected(newSelected);\n                    }}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox checked={checked} />\n                    </TableCell>\n                    {cells.map((c, index) => {\n                      if (c.key !== uniqueId) {\n                        // @ts-ignore\n                        const value = formatValue(row[c.key]);\n                        return (\n                          <EnhancedTableCell key={index}>\n                            {value}\n                          </EnhancedTableCell>\n                        );\n                      }\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={rowsPerPageOptions}\n          labelRowsPerPage={t('table-general-rows-per-page')}\n          count={count}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          component=\"div\"\n          onChangePage={onChangePage}\n          onChangeRowsPerPage={onChangeRowsPerPage}\n          labelDisplayedRows={({ from, to, count }) =>\n            `${from}-${to} ${t('table-general-displayed-rows-of')} ${count}`\n          }\n        />\n      </Paper>\n    </div>\n  );\n};\n\nexport default EnhancedTable;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;;;;A","sourceRoot":""}